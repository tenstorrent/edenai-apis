{
  "original_response": null,
  "standardized_response": {
    "stream": "SerializationIterator(index=0, iterator=ValidatorIterator(index=0, schema=Some(Model(ModelValidator { revalidate: Never, validator: ModelFields(ModelFieldsValidator { fields: [Field { name: \"text\", lookup_key: Simple { key: \"text\", py_key: Py(0x1067df870), path: LookupPath([S(\"text\", Py(0x1067df7b0))]) }, name_py: Py(0x103648180), validator: Str(StrValidator { strict: false, coerce_numbers_to_str: false }), frozen: false }, Field { name: \"blocked\", lookup_key: Simple { key: \"blocked\", py_key: Py(0x1067df9f0), path: LookupPath([S(\"blocked\", Py(0x1067df930))]) }, name_py: Py(0x1067ca6b0), validator: Bool(BoolValidator { strict: false }), frozen: false }, Field { name: \"provider\", lookup_key: Simple { key: \"provider\", py_key: Py(0x1067df970), path: LookupPath([S(\"provider\", Py(0x1067df8b0))]) }, name_py: Py(0x104c66d70), validator: Str(StrValidator { strict: false, coerce_numbers_to_str: false }), frozen: false }], model_name: \"ChatStreamResponse\", extra_behavior: Ignore, extras_validator: None, strict: false, from_attributes: false, loc_by_alias: true }), class: Py(0x1065e3870), post_init: None, frozen: false, custom_init: false, root_model: false, undefined: Py(0x1029ed2e0), name: \"ChatStreamResponse\" }))))"
  },
  "usage": null,
  "cost": null
}